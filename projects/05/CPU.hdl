// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not (in=instruction[15], out=isAIns);
    Not (in=isAIns, out=isCIns);

    Mux16 (a=prevM, b=instruction, sel=isAIns, out=inA);
    And (a=isCIns, b=instruction[5], out=loadA2);
    Or (a=isAIns, b=loadA2, out=loadA);
    ARegister (in=inA, load=loadA, out=outA, out[0..14]=addressM);

    And (a=isCIns, b=instruction[4], out=loadD);
    DRegister (in=prevM, load=loadD, out=outD);
    And (a=isCIns, b=instruction[12], out=mFlag);
    Mux16 (a=outA, b=inM, sel=mFlag, out=aOrM);

    ALU (x=outD, y=aOrM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=prevM, zr=zr, ng=ng);

    // writeM
    And (a=instruction[3], b=isCIns, out=writeM);

    Not (in=instruction[2], out=notJ1);
    Not (in=instruction[1], out=notJ2);
    Not (in=instruction[0], out=notJ3);
    Not (in=zr, out=notZr);
    Not (in=ng, out=notNg);
    Or (a=zr, b=ng, out=zOrN);
    And (a=notJ1, b=notJ2, out=notJ1NotJ2);
    And (a=instruction[2], b=instruction[1], out=j1J2);
    And (a=instruction[2], b=notJ2, out=j1NotJ2);
    And (a=notJ1, b=instruction[1], out=notJ1J2);
    And (a=notJ1NotJ2, b=instruction[0], out=jgt);

    // PC
    And (a=jgt, b=notZr, out=jgtTmp);
    And (a=jgtTmp, b=notNg, out=jgtFlag);
    And (a=notJ1J2, b=notJ3, out=jeq);
    And (a=jeq, b=zr, out=jeqFlag);
    And (a=notJ1J2, b=instruction[0], out=jge);
    And (a=jge, b=notNg, out=jgeFlag);
    And (a=j1NotJ2, b=notJ3, out=jlt);
    And (a=jlt, b=ng, out=jltFlag);
    And (a=j1NotJ2, b=instruction[0], out=jne);
    And (a=jne, b=notZr, out=jneFlag);
    And (a=j1J2, b=notJ3, out=jle);
    And (a=jle, b=zOrN, out=jleFlag);
    And (a=j1J2, b=instruction[0], out=jmp);
    Or8Way (in[0]=jgtFlag, in[1]=jeqFlag, in[2]=jgeFlag, in[3]=jltFlag, in[4]=jneFlag, in[5]=jleFlag, in[6]=jmp, in[7]=false, out=anyJumpFlagTmp);
    And (a=instruction[15], b=anyJumpFlagTmp, out=anyJumpFlag);

    Inc16 (in=prevPC, out=incPC);
    Mux16 (a=incPC, b=false, sel=reset, out=newPCTmp);
    Mux16 (a=newPCTmp, b=outA, sel=anyJumpFlag, out=newPCTmp2);
    Mux16 (a=newPCTmp2, b=false, sel=reset, out=newPC);
    Register (in=newPC, load=true, out[0..14]=pc, out=prevPC);
}
