// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int index, power;
        let index = 0;
        let power = 1;
        let twoToThe = Array.new(16);
        while(index < 16) {
            let twoToThe[index] = power;
            let power = power + power;
            let index = index + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        } else {
            return x;
        }
    }

    /** private function
    *   if x's j-th bit is 1 then return true
    */
    function boolean bit(int x, int j) {
        if ((x & twoToThe[j]) > 0) {
            return true;
        } else {
            return false;
        }
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        if ((x < 0) & (y < 0)) {
            return Math.multiplyBody(-x, -y);
        }
        if (x < 0) {
            return - Math.multiplyBody(-x, y);
        }
        if (y < 0) {
            return - Math.multiplyBody(x, -y);
        }
        return Math.multiplyBody(x, y);
    }

    function int multiplyBody(int x, int y) {
        var int index, sum, shiftedX;
        let index = 0;
        let sum = 0;
        let shiftedX = x;
        while(index < 16) {
            if(Math.bit(y, index)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let index = index + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        if ((x < 0) & (y < 0)) {
            return Math.divideBody(-x, -y);
        }
        if (x < 0) {
            return - Math.divideBody(-x, y);
        }
        if (y < 0) {
            return - Math.divideBody(x, -y);
        }
        return Math.divideBody(x, y);
    }

    function int divideBody(int x, int y) {
        var int q, y2, tmp;
        if (y < 0) {
            return 0;
        }
        if (y > x) {
            return 0;
        }
        let y2 = y + y;
        let q = Math.divideBody(x, y2);
        let tmp = q * y2;
        if ((x - tmp) < y) {
            return q + q;
        } else {
            return q + q + 1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        if (x = 0) {
            return 0;
        }
        if (x < 0) {
            return 0;
        }
        return Math.sqrtBody(x);
    }

    function int sqrtBody(int x) {
        var int y, j, tmp, tmp2;
        let y = 0;
        let j = 7;  // n/2 -1. n=16
        while(j > -1) {     // 0 <= j <= 7
            let tmp = y + twoToThe[j];
            let tmp2 = tmp * tmp;
            if (tmp2 > 0){
                if (tmp2 = x) {
                    return tmp;
                }
                if (tmp2 < x) {
                    let y = tmp;
                }
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a < b) {
            return b;
        } else {
            return a;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }
}
