// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int capacity;
    field Array text;
    field int currentLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let capacity = maxLength;
        if (maxLength = 0) {
            // nothing
        } else{
            let text = Array.new(maxLength);
        }
        let currentLength = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (capacity = 0) {
            // nothing
        } else {
            do Memory.deAlloc(text);
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return currentLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return text[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let text[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let text[currentLength] = c;
        let currentLength = currentLength + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let currentLength = currentLength - 1;
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int index, sum;
        let index = currentLength - 1;
        let sum = 0;
        while(index > -1) {
            let sum = sum * 10;
            let sum = sum + text[index] - 48;
            let index = index - 1;
        }
        return sum;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int index, index2;
        var Array reverse;
        let index = 0;
        let index2 = 0;
        let reverse = Array.new(16);
        while(val > 0) {
            let reverse[index] = String.surplus10(val) + 48;
            let val = val / 10;
            let index = index + 1;
        }
        if (val < 0) {
            let reverse[index] = 45;    // -
        }
        let index = index - 1;
        while (index > 0) {
            let text[index2] =  reverse[index];
            let index = index - 1;
            let index2 = index2 + 1;
        }
        let currentLength = index2;
        return;
    }

    // return (val % 10);
    function int surplus10(int val) {
        var int tmp;
        let tmp = val / 10;
        return val - (tmp * 10);
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
